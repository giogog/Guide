Building Project With Dotnet CLI:
	Chosing Folder
	dotnet new sln - ფოლდერში სოლუშენიც ინიციალიზება
	dotnet sln add (folderis saxeli) - სოლუშენის გამშვები ფაილის დამატება პროექტის რომელიმე ფაილში
	dotnet new list - პროექტების ჩამონათვალი
	dotnet new webapi -n (სახელი)
	dotnet build - პროექტის დაბილდვა 
	dotnet run - პროექტის გაშვება
	dotnet watch - პროექტის გაშვება, მონიტორინგი, ცვლილებების შეტანა პროექტში ის რომ ლაივ რეჟიმში შეიცვალოს
	dotnet dev-certs https --trust = https სერთიფიკატის დამატება
        dotnet dev-certs https --clean = https სერთიფიკატის გაუქმება
	appsetting.json : "Microsoft.AspNetCore":"Warning" -> "Information" - გაშვებულ პროექტზე უფრო მეტ ინფოს დაწერს 

Nuget Packages:
	Entity Framework Core,Tools,Sql Server,Design - dotnet add package Microsoft.EntityFrameworkCore.(specific package) --version 8.0.0 ||| dotnet tool install/update --global dotnet-ef --version 8.0.0 პროექტში დამატება ან 																													განახლება
	Auto Mapper,Dependency Injection

	AspNetCore.Indentity

	AspNetCore.Indentity.EntityFrameWorkCore

Secrets initialization and set
	dotnet user-secrets set "ConnectionStrings:DefaultConnection" "[ConnectionString]" --project "[Your Project Folder]"

	Get Secret
		1)var Secret = builder.Configuration["ConnectionStrings:DefaultConnection"]

Create Db Context class
	exampleContext:DbContext
	public exampleContext(DbContextOptions<exampleContext> options): base(options){}
	public DbSet<someModel> models {get; set;}

	Db Context injection
		1)builder.Services.AddDbContext<exampleContext>(options => options.UseSqlServer(connectionString) - > არგუმენტად გადაეცემა კოლექცია, ამ შემთხვევაში 		კოლექციის ერთერთი პარამეტრი UseSqlServer)

Initial EF migration
	in app csjson change <InvariantGlobalization>true</InvariantGlobalization> --> <InvariantGlobalization>false</InvariantGlobalization>

	Nuget : Add-Migration InitialCreate // PowerShell : dotnet ef migrations add Initial -o (ფოლდერის მისამართი)

	Nuget : Update-Database // PowerShell : dotnet ef database update
	
EF Async Methods
	// Asynchronous Read (Retrieve)
	var result = await _context.Entities(User).ToListAsync();

	// Asynchronous Create (Insert)
	dbContext.Entities.Add(entity);
	await dbContext.SaveChangesAsync();

	// Asynchronous Update
	var entityToUpdate = await dbContext.Entities.FindAsync(id);
	if (entityToUpdate != null)
	{
    	entityToUpdate.PropertyToUpdate = newValue;
    	await dbContext.SaveChangesAsync();
	}

	// Asynchronous Delete
	var entityToDelete = await dbContext.Entities.FindAsync(id);
	if (entityToDelete != null)
	{
    		dbContext.Entities.Remove(entityToDelete);
    		await dbContext.SaveChangesAsync();
	}

Authorization&Authentication
	



